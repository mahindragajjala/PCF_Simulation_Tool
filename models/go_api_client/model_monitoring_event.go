/*
Nudm_EE

Nudm Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonitoringEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoringEvent{}

// MonitoringEvent struct for MonitoringEvent
type MonitoringEvent struct {
	EventType EventType `json:"eventType"`
	RevokedCause *RevokedCause `json:"revokedCause,omitempty"`
}

type _MonitoringEvent MonitoringEvent

// NewMonitoringEvent instantiates a new MonitoringEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringEvent(eventType EventType) *MonitoringEvent {
	this := MonitoringEvent{}
	this.EventType = eventType
	return &this
}

// NewMonitoringEventWithDefaults instantiates a new MonitoringEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringEventWithDefaults() *MonitoringEvent {
	this := MonitoringEvent{}
	return &this
}

// GetEventType returns the EventType field value
func (o *MonitoringEvent) GetEventType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *MonitoringEvent) GetEventTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *MonitoringEvent) SetEventType(v EventType) {
	o.EventType = v
}

// GetRevokedCause returns the RevokedCause field value if set, zero value otherwise.
func (o *MonitoringEvent) GetRevokedCause() RevokedCause {
	if o == nil || IsNil(o.RevokedCause) {
		var ret RevokedCause
		return ret
	}
	return *o.RevokedCause
}

// GetRevokedCauseOk returns a tuple with the RevokedCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringEvent) GetRevokedCauseOk() (*RevokedCause, bool) {
	if o == nil || IsNil(o.RevokedCause) {
		return nil, false
	}
	return o.RevokedCause, true
}

// HasRevokedCause returns a boolean if a field has been set.
func (o *MonitoringEvent) HasRevokedCause() bool {
	if o != nil && !IsNil(o.RevokedCause) {
		return true
	}

	return false
}

// SetRevokedCause gets a reference to the given RevokedCause and assigns it to the RevokedCause field.
func (o *MonitoringEvent) SetRevokedCause(v RevokedCause) {
	o.RevokedCause = &v
}

func (o MonitoringEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoringEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventType"] = o.EventType
	if !IsNil(o.RevokedCause) {
		toSerialize["revokedCause"] = o.RevokedCause
	}
	return toSerialize, nil
}

func (o *MonitoringEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonitoringEvent := _MonitoringEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonitoringEvent)

	if err != nil {
		return err
	}

	*o = MonitoringEvent(varMonitoringEvent)

	return err
}

type NullableMonitoringEvent struct {
	value *MonitoringEvent
	isSet bool
}

func (v NullableMonitoringEvent) Get() *MonitoringEvent {
	return v.value
}

func (v *NullableMonitoringEvent) Set(val *MonitoringEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringEvent(val *MonitoringEvent) *NullableMonitoringEvent {
	return &NullableMonitoringEvent{value: val, isSet: true}
}

func (v NullableMonitoringEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


