/*
Nudm_UECM

Nudm Context Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmfRegistrationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmfRegistrationInfo{}

// SmfRegistrationInfo This data type provides information about the SMF registration information.
type SmfRegistrationInfo struct {
	SmfRegistrationList []SmfRegistration `json:"smfRegistrationList"`
}

type _SmfRegistrationInfo SmfRegistrationInfo

// NewSmfRegistrationInfo instantiates a new SmfRegistrationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmfRegistrationInfo(smfRegistrationList []SmfRegistration) *SmfRegistrationInfo {
	this := SmfRegistrationInfo{}
	this.SmfRegistrationList = smfRegistrationList
	return &this
}

// NewSmfRegistrationInfoWithDefaults instantiates a new SmfRegistrationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmfRegistrationInfoWithDefaults() *SmfRegistrationInfo {
	this := SmfRegistrationInfo{}
	return &this
}

// GetSmfRegistrationList returns the SmfRegistrationList field value
func (o *SmfRegistrationInfo) GetSmfRegistrationList() []SmfRegistration {
	if o == nil {
		var ret []SmfRegistration
		return ret
	}

	return o.SmfRegistrationList
}

// GetSmfRegistrationListOk returns a tuple with the SmfRegistrationList field value
// and a boolean to check if the value has been set.
func (o *SmfRegistrationInfo) GetSmfRegistrationListOk() ([]SmfRegistration, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmfRegistrationList, true
}

// SetSmfRegistrationList sets field value
func (o *SmfRegistrationInfo) SetSmfRegistrationList(v []SmfRegistration) {
	o.SmfRegistrationList = v
}

func (o SmfRegistrationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmfRegistrationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smfRegistrationList"] = o.SmfRegistrationList
	return toSerialize, nil
}

func (o *SmfRegistrationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"smfRegistrationList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmfRegistrationInfo := _SmfRegistrationInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmfRegistrationInfo)

	if err != nil {
		return err
	}

	*o = SmfRegistrationInfo(varSmfRegistrationInfo)

	return err
}

type NullableSmfRegistrationInfo struct {
	value *SmfRegistrationInfo
	isSet bool
}

func (v NullableSmfRegistrationInfo) Get() *SmfRegistrationInfo {
	return v.value
}

func (v *NullableSmfRegistrationInfo) Set(val *SmfRegistrationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSmfRegistrationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSmfRegistrationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmfRegistrationInfo(val *SmfRegistrationInfo) *NullableSmfRegistrationInfo {
	return &NullableSmfRegistrationInfo{value: val, isSet: true}
}

func (v NullableSmfRegistrationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmfRegistrationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


