/*
Nudm_UECM

Nudm Context Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SmsfRegistrationModification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmsfRegistrationModification{}

// SmsfRegistrationModification Contains attributes of SmsfRegistration that can be modified using PATCH
type SmsfRegistrationModification struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	SmsfInstanceId string `json:"smsfInstanceId"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	SmsfSetId *string `json:"smsfSetId,omitempty"`
	UeMemoryAvailableInd *bool `json:"ueMemoryAvailableInd,omitempty"`
}

type _SmsfRegistrationModification SmsfRegistrationModification

// NewSmsfRegistrationModification instantiates a new SmsfRegistrationModification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmsfRegistrationModification(smsfInstanceId string) *SmsfRegistrationModification {
	this := SmsfRegistrationModification{}
	this.SmsfInstanceId = smsfInstanceId
	return &this
}

// NewSmsfRegistrationModificationWithDefaults instantiates a new SmsfRegistrationModification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmsfRegistrationModificationWithDefaults() *SmsfRegistrationModification {
	this := SmsfRegistrationModification{}
	return &this
}

// GetSmsfInstanceId returns the SmsfInstanceId field value
func (o *SmsfRegistrationModification) GetSmsfInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SmsfInstanceId
}

// GetSmsfInstanceIdOk returns a tuple with the SmsfInstanceId field value
// and a boolean to check if the value has been set.
func (o *SmsfRegistrationModification) GetSmsfInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SmsfInstanceId, true
}

// SetSmsfInstanceId sets field value
func (o *SmsfRegistrationModification) SetSmsfInstanceId(v string) {
	o.SmsfInstanceId = v
}

// GetSmsfSetId returns the SmsfSetId field value if set, zero value otherwise.
func (o *SmsfRegistrationModification) GetSmsfSetId() string {
	if o == nil || IsNil(o.SmsfSetId) {
		var ret string
		return ret
	}
	return *o.SmsfSetId
}

// GetSmsfSetIdOk returns a tuple with the SmsfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfRegistrationModification) GetSmsfSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmsfSetId) {
		return nil, false
	}
	return o.SmsfSetId, true
}

// HasSmsfSetId returns a boolean if a field has been set.
func (o *SmsfRegistrationModification) HasSmsfSetId() bool {
	if o != nil && !IsNil(o.SmsfSetId) {
		return true
	}

	return false
}

// SetSmsfSetId gets a reference to the given string and assigns it to the SmsfSetId field.
func (o *SmsfRegistrationModification) SetSmsfSetId(v string) {
	o.SmsfSetId = &v
}

// GetUeMemoryAvailableInd returns the UeMemoryAvailableInd field value if set, zero value otherwise.
func (o *SmsfRegistrationModification) GetUeMemoryAvailableInd() bool {
	if o == nil || IsNil(o.UeMemoryAvailableInd) {
		var ret bool
		return ret
	}
	return *o.UeMemoryAvailableInd
}

// GetUeMemoryAvailableIndOk returns a tuple with the UeMemoryAvailableInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmsfRegistrationModification) GetUeMemoryAvailableIndOk() (*bool, bool) {
	if o == nil || IsNil(o.UeMemoryAvailableInd) {
		return nil, false
	}
	return o.UeMemoryAvailableInd, true
}

// HasUeMemoryAvailableInd returns a boolean if a field has been set.
func (o *SmsfRegistrationModification) HasUeMemoryAvailableInd() bool {
	if o != nil && !IsNil(o.UeMemoryAvailableInd) {
		return true
	}

	return false
}

// SetUeMemoryAvailableInd gets a reference to the given bool and assigns it to the UeMemoryAvailableInd field.
func (o *SmsfRegistrationModification) SetUeMemoryAvailableInd(v bool) {
	o.UeMemoryAvailableInd = &v
}

func (o SmsfRegistrationModification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmsfRegistrationModification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["smsfInstanceId"] = o.SmsfInstanceId
	if !IsNil(o.SmsfSetId) {
		toSerialize["smsfSetId"] = o.SmsfSetId
	}
	if !IsNil(o.UeMemoryAvailableInd) {
		toSerialize["ueMemoryAvailableInd"] = o.UeMemoryAvailableInd
	}
	return toSerialize, nil
}

func (o *SmsfRegistrationModification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"smsfInstanceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSmsfRegistrationModification := _SmsfRegistrationModification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSmsfRegistrationModification)

	if err != nil {
		return err
	}

	*o = SmsfRegistrationModification(varSmsfRegistrationModification)

	return err
}

type NullableSmsfRegistrationModification struct {
	value *SmsfRegistrationModification
	isSet bool
}

func (v NullableSmsfRegistrationModification) Get() *SmsfRegistrationModification {
	return v.value
}

func (v *NullableSmsfRegistrationModification) Set(val *SmsfRegistrationModification) {
	v.value = val
	v.isSet = true
}

func (v NullableSmsfRegistrationModification) IsSet() bool {
	return v.isSet
}

func (v *NullableSmsfRegistrationModification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmsfRegistrationModification(val *SmsfRegistrationModification) *NullableSmsfRegistrationModification {
	return &NullableSmsfRegistrationModification{value: val, isSet: true}
}

func (v NullableSmsfRegistrationModification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmsfRegistrationModification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


