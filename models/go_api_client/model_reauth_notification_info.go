/*
Nudm_UECM

Nudm Context Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReauthNotificationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReauthNotificationInfo{}

// ReauthNotificationInfo Contains the SUPI to identify the UE that is subject to reauthentication
type ReauthNotificationInfo struct {
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi string `json:"supi" validate:"regexp=^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$"`
}

type _ReauthNotificationInfo ReauthNotificationInfo

// NewReauthNotificationInfo instantiates a new ReauthNotificationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReauthNotificationInfo(supi string) *ReauthNotificationInfo {
	this := ReauthNotificationInfo{}
	this.Supi = supi
	return &this
}

// NewReauthNotificationInfoWithDefaults instantiates a new ReauthNotificationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReauthNotificationInfoWithDefaults() *ReauthNotificationInfo {
	this := ReauthNotificationInfo{}
	return &this
}

// GetSupi returns the Supi field value
func (o *ReauthNotificationInfo) GetSupi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Supi
}

// GetSupiOk returns a tuple with the Supi field value
// and a boolean to check if the value has been set.
func (o *ReauthNotificationInfo) GetSupiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supi, true
}

// SetSupi sets field value
func (o *ReauthNotificationInfo) SetSupi(v string) {
	o.Supi = v
}

func (o ReauthNotificationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReauthNotificationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supi"] = o.Supi
	return toSerialize, nil
}

func (o *ReauthNotificationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"supi",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReauthNotificationInfo := _ReauthNotificationInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReauthNotificationInfo)

	if err != nil {
		return err
	}

	*o = ReauthNotificationInfo(varReauthNotificationInfo)

	return err
}

type NullableReauthNotificationInfo struct {
	value *ReauthNotificationInfo
	isSet bool
}

func (v NullableReauthNotificationInfo) Get() *ReauthNotificationInfo {
	return v.value
}

func (v *NullableReauthNotificationInfo) Set(val *ReauthNotificationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReauthNotificationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReauthNotificationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReauthNotificationInfo(val *ReauthNotificationInfo) *NullableReauthNotificationInfo {
	return &NullableReauthNotificationInfo{value: val, isSet: true}
}

func (v NullableReauthNotificationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReauthNotificationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


