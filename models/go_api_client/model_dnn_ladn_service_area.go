/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DnnLadnServiceArea type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnnLadnServiceArea{}

// DnnLadnServiceArea struct for DnnLadnServiceArea
type DnnLadnServiceArea struct {
	Dnn AccessAndMobilitySubscriptionDataSubscribedDnnListInner `json:"dnn"`
	LadnServiceArea []Tai `json:"ladnServiceArea"`
}

type _DnnLadnServiceArea DnnLadnServiceArea

// NewDnnLadnServiceArea instantiates a new DnnLadnServiceArea object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnnLadnServiceArea(dnn AccessAndMobilitySubscriptionDataSubscribedDnnListInner, ladnServiceArea []Tai) *DnnLadnServiceArea {
	this := DnnLadnServiceArea{}
	this.Dnn = dnn
	this.LadnServiceArea = ladnServiceArea
	return &this
}

// NewDnnLadnServiceAreaWithDefaults instantiates a new DnnLadnServiceArea object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnnLadnServiceAreaWithDefaults() *DnnLadnServiceArea {
	this := DnnLadnServiceArea{}
	return &this
}

// GetDnn returns the Dnn field value
func (o *DnnLadnServiceArea) GetDnn() AccessAndMobilitySubscriptionDataSubscribedDnnListInner {
	if o == nil {
		var ret AccessAndMobilitySubscriptionDataSubscribedDnnListInner
		return ret
	}

	return o.Dnn
}

// GetDnnOk returns a tuple with the Dnn field value
// and a boolean to check if the value has been set.
func (o *DnnLadnServiceArea) GetDnnOk() (*AccessAndMobilitySubscriptionDataSubscribedDnnListInner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dnn, true
}

// SetDnn sets field value
func (o *DnnLadnServiceArea) SetDnn(v AccessAndMobilitySubscriptionDataSubscribedDnnListInner) {
	o.Dnn = v
}

// GetLadnServiceArea returns the LadnServiceArea field value
func (o *DnnLadnServiceArea) GetLadnServiceArea() []Tai {
	if o == nil {
		var ret []Tai
		return ret
	}

	return o.LadnServiceArea
}

// GetLadnServiceAreaOk returns a tuple with the LadnServiceArea field value
// and a boolean to check if the value has been set.
func (o *DnnLadnServiceArea) GetLadnServiceAreaOk() ([]Tai, bool) {
	if o == nil {
		return nil, false
	}
	return o.LadnServiceArea, true
}

// SetLadnServiceArea sets field value
func (o *DnnLadnServiceArea) SetLadnServiceArea(v []Tai) {
	o.LadnServiceArea = v
}

func (o DnnLadnServiceArea) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnnLadnServiceArea) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dnn"] = o.Dnn
	toSerialize["ladnServiceArea"] = o.LadnServiceArea
	return toSerialize, nil
}

func (o *DnnLadnServiceArea) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dnn",
		"ladnServiceArea",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnnLadnServiceArea := _DnnLadnServiceArea{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnnLadnServiceArea)

	if err != nil {
		return err
	}

	*o = DnnLadnServiceArea(varDnnLadnServiceArea)

	return err
}

type NullableDnnLadnServiceArea struct {
	value *DnnLadnServiceArea
	isSet bool
}

func (v NullableDnnLadnServiceArea) Get() *DnnLadnServiceArea {
	return v.value
}

func (v *NullableDnnLadnServiceArea) Set(val *DnnLadnServiceArea) {
	v.value = val
	v.isSet = true
}

func (v NullableDnnLadnServiceArea) IsSet() bool {
	return v.isSet
}

func (v *NullableDnnLadnServiceArea) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnnLadnServiceArea(val *DnnLadnServiceArea) *NullableDnnLadnServiceArea {
	return &NullableDnnLadnServiceArea{value: val, isSet: true}
}

func (v NullableDnnLadnServiceArea) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnnLadnServiceArea) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


