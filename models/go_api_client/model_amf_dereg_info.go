/*
Nudm_UECM

Nudm Context Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AmfDeregInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmfDeregInfo{}

// AmfDeregInfo This data type contains the reason of deregistration.
type AmfDeregInfo struct {
	DeregReason DeregistrationReason `json:"deregReason"`
}

type _AmfDeregInfo AmfDeregInfo

// NewAmfDeregInfo instantiates a new AmfDeregInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmfDeregInfo(deregReason DeregistrationReason) *AmfDeregInfo {
	this := AmfDeregInfo{}
	this.DeregReason = deregReason
	return &this
}

// NewAmfDeregInfoWithDefaults instantiates a new AmfDeregInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmfDeregInfoWithDefaults() *AmfDeregInfo {
	this := AmfDeregInfo{}
	return &this
}

// GetDeregReason returns the DeregReason field value
func (o *AmfDeregInfo) GetDeregReason() DeregistrationReason {
	if o == nil {
		var ret DeregistrationReason
		return ret
	}

	return o.DeregReason
}

// GetDeregReasonOk returns a tuple with the DeregReason field value
// and a boolean to check if the value has been set.
func (o *AmfDeregInfo) GetDeregReasonOk() (*DeregistrationReason, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeregReason, true
}

// SetDeregReason sets field value
func (o *AmfDeregInfo) SetDeregReason(v DeregistrationReason) {
	o.DeregReason = v
}

func (o AmfDeregInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmfDeregInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deregReason"] = o.DeregReason
	return toSerialize, nil
}

func (o *AmfDeregInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deregReason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAmfDeregInfo := _AmfDeregInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAmfDeregInfo)

	if err != nil {
		return err
	}

	*o = AmfDeregInfo(varAmfDeregInfo)

	return err
}

type NullableAmfDeregInfo struct {
	value *AmfDeregInfo
	isSet bool
}

func (v NullableAmfDeregInfo) Get() *AmfDeregInfo {
	return v.value
}

func (v *NullableAmfDeregInfo) Set(val *AmfDeregInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAmfDeregInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAmfDeregInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmfDeregInfo(val *AmfDeregInfo) *NullableAmfDeregInfo {
	return &NullableAmfDeregInfo{value: val, isSet: true}
}

func (v NullableAmfDeregInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmfDeregInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


