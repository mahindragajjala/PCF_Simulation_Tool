/*
NudmUEAU

UDM UE Authentication Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AvEpsAka type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvEpsAka{}

// AvEpsAka struct for AvEpsAka
type AvEpsAka struct {
	AvType HssAvType `json:"avType"`
	Rand string `json:"rand" validate:"regexp=^[A-Fa-f0-9]{32}$"`
	Xres string `json:"xres" validate:"regexp=^[A-Fa-f0-9]{8,32}$"`
	Autn string `json:"autn" validate:"regexp=^[A-Fa-f0-9]{32}$"`
	Kasme string `json:"kasme" validate:"regexp=^[A-Fa-f0-9]{64}$"`
}

type _AvEpsAka AvEpsAka

// NewAvEpsAka instantiates a new AvEpsAka object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvEpsAka(avType HssAvType, rand string, xres string, autn string, kasme string) *AvEpsAka {
	this := AvEpsAka{}
	this.AvType = avType
	this.Rand = rand
	this.Xres = xres
	this.Autn = autn
	this.Kasme = kasme
	return &this
}

// NewAvEpsAkaWithDefaults instantiates a new AvEpsAka object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvEpsAkaWithDefaults() *AvEpsAka {
	this := AvEpsAka{}
	return &this
}

// GetAvType returns the AvType field value
func (o *AvEpsAka) GetAvType() HssAvType {
	if o == nil {
		var ret HssAvType
		return ret
	}

	return o.AvType
}

// GetAvTypeOk returns a tuple with the AvType field value
// and a boolean to check if the value has been set.
func (o *AvEpsAka) GetAvTypeOk() (*HssAvType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvType, true
}

// SetAvType sets field value
func (o *AvEpsAka) SetAvType(v HssAvType) {
	o.AvType = v
}

// GetRand returns the Rand field value
func (o *AvEpsAka) GetRand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rand
}

// GetRandOk returns a tuple with the Rand field value
// and a boolean to check if the value has been set.
func (o *AvEpsAka) GetRandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rand, true
}

// SetRand sets field value
func (o *AvEpsAka) SetRand(v string) {
	o.Rand = v
}

// GetXres returns the Xres field value
func (o *AvEpsAka) GetXres() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Xres
}

// GetXresOk returns a tuple with the Xres field value
// and a boolean to check if the value has been set.
func (o *AvEpsAka) GetXresOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Xres, true
}

// SetXres sets field value
func (o *AvEpsAka) SetXres(v string) {
	o.Xres = v
}

// GetAutn returns the Autn field value
func (o *AvEpsAka) GetAutn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Autn
}

// GetAutnOk returns a tuple with the Autn field value
// and a boolean to check if the value has been set.
func (o *AvEpsAka) GetAutnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Autn, true
}

// SetAutn sets field value
func (o *AvEpsAka) SetAutn(v string) {
	o.Autn = v
}

// GetKasme returns the Kasme field value
func (o *AvEpsAka) GetKasme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kasme
}

// GetKasmeOk returns a tuple with the Kasme field value
// and a boolean to check if the value has been set.
func (o *AvEpsAka) GetKasmeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kasme, true
}

// SetKasme sets field value
func (o *AvEpsAka) SetKasme(v string) {
	o.Kasme = v
}

func (o AvEpsAka) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvEpsAka) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avType"] = o.AvType
	toSerialize["rand"] = o.Rand
	toSerialize["xres"] = o.Xres
	toSerialize["autn"] = o.Autn
	toSerialize["kasme"] = o.Kasme
	return toSerialize, nil
}

func (o *AvEpsAka) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avType",
		"rand",
		"xres",
		"autn",
		"kasme",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvEpsAka := _AvEpsAka{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvEpsAka)

	if err != nil {
		return err
	}

	*o = AvEpsAka(varAvEpsAka)

	return err
}

type NullableAvEpsAka struct {
	value *AvEpsAka
	isSet bool
}

func (v NullableAvEpsAka) Get() *AvEpsAka {
	return v.value
}

func (v *NullableAvEpsAka) Set(val *AvEpsAka) {
	v.value = val
	v.isSet = true
}

func (v NullableAvEpsAka) IsSet() bool {
	return v.isSet
}

func (v *NullableAvEpsAka) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvEpsAka(val *AvEpsAka) *NullableAvEpsAka {
	return &NullableAvEpsAka{value: val, isSet: true}
}

func (v NullableAvEpsAka) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvEpsAka) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


