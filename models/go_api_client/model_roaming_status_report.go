/*
Nudm_EE

Nudm Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoamingStatusReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoamingStatusReport{}

// RoamingStatusReport struct for RoamingStatusReport
type RoamingStatusReport struct {
	Roaming bool `json:"roaming"`
	NewServingPlmn PlmnId `json:"newServingPlmn"`
	AccessType *AccessType `json:"accessType,omitempty"`
	Purged *bool `json:"purged,omitempty"`
}

type _RoamingStatusReport RoamingStatusReport

// NewRoamingStatusReport instantiates a new RoamingStatusReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoamingStatusReport(roaming bool, newServingPlmn PlmnId) *RoamingStatusReport {
	this := RoamingStatusReport{}
	this.Roaming = roaming
	this.NewServingPlmn = newServingPlmn
	return &this
}

// NewRoamingStatusReportWithDefaults instantiates a new RoamingStatusReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoamingStatusReportWithDefaults() *RoamingStatusReport {
	this := RoamingStatusReport{}
	return &this
}

// GetRoaming returns the Roaming field value
func (o *RoamingStatusReport) GetRoaming() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Roaming
}

// GetRoamingOk returns a tuple with the Roaming field value
// and a boolean to check if the value has been set.
func (o *RoamingStatusReport) GetRoamingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Roaming, true
}

// SetRoaming sets field value
func (o *RoamingStatusReport) SetRoaming(v bool) {
	o.Roaming = v
}

// GetNewServingPlmn returns the NewServingPlmn field value
func (o *RoamingStatusReport) GetNewServingPlmn() PlmnId {
	if o == nil {
		var ret PlmnId
		return ret
	}

	return o.NewServingPlmn
}

// GetNewServingPlmnOk returns a tuple with the NewServingPlmn field value
// and a boolean to check if the value has been set.
func (o *RoamingStatusReport) GetNewServingPlmnOk() (*PlmnId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewServingPlmn, true
}

// SetNewServingPlmn sets field value
func (o *RoamingStatusReport) SetNewServingPlmn(v PlmnId) {
	o.NewServingPlmn = v
}

// GetAccessType returns the AccessType field value if set, zero value otherwise.
func (o *RoamingStatusReport) GetAccessType() AccessType {
	if o == nil || IsNil(o.AccessType) {
		var ret AccessType
		return ret
	}
	return *o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoamingStatusReport) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil || IsNil(o.AccessType) {
		return nil, false
	}
	return o.AccessType, true
}

// HasAccessType returns a boolean if a field has been set.
func (o *RoamingStatusReport) HasAccessType() bool {
	if o != nil && !IsNil(o.AccessType) {
		return true
	}

	return false
}

// SetAccessType gets a reference to the given AccessType and assigns it to the AccessType field.
func (o *RoamingStatusReport) SetAccessType(v AccessType) {
	o.AccessType = &v
}

// GetPurged returns the Purged field value if set, zero value otherwise.
func (o *RoamingStatusReport) GetPurged() bool {
	if o == nil || IsNil(o.Purged) {
		var ret bool
		return ret
	}
	return *o.Purged
}

// GetPurgedOk returns a tuple with the Purged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoamingStatusReport) GetPurgedOk() (*bool, bool) {
	if o == nil || IsNil(o.Purged) {
		return nil, false
	}
	return o.Purged, true
}

// HasPurged returns a boolean if a field has been set.
func (o *RoamingStatusReport) HasPurged() bool {
	if o != nil && !IsNil(o.Purged) {
		return true
	}

	return false
}

// SetPurged gets a reference to the given bool and assigns it to the Purged field.
func (o *RoamingStatusReport) SetPurged(v bool) {
	o.Purged = &v
}

func (o RoamingStatusReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoamingStatusReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roaming"] = o.Roaming
	toSerialize["newServingPlmn"] = o.NewServingPlmn
	if !IsNil(o.AccessType) {
		toSerialize["accessType"] = o.AccessType
	}
	if !IsNil(o.Purged) {
		toSerialize["purged"] = o.Purged
	}
	return toSerialize, nil
}

func (o *RoamingStatusReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roaming",
		"newServingPlmn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoamingStatusReport := _RoamingStatusReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoamingStatusReport)

	if err != nil {
		return err
	}

	*o = RoamingStatusReport(varRoamingStatusReport)

	return err
}

type NullableRoamingStatusReport struct {
	value *RoamingStatusReport
	isSet bool
}

func (v NullableRoamingStatusReport) Get() *RoamingStatusReport {
	return v.value
}

func (v *NullableRoamingStatusReport) Set(val *RoamingStatusReport) {
	v.value = val
	v.isSet = true
}

func (v NullableRoamingStatusReport) IsSet() bool {
	return v.isSet
}

func (v *NullableRoamingStatusReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoamingStatusReport(val *RoamingStatusReport) *NullableRoamingStatusReport {
	return &NullableRoamingStatusReport{value: val, isSet: true}
}

func (v NullableRoamingStatusReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoamingStatusReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


