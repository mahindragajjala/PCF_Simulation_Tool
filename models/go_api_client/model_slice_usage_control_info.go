/*
Nudm_PP

Nudm Parameter Provision Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SliceUsageControlInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliceUsageControlInfo{}

// SliceUsageControlInfo The network slice usage control related information
type SliceUsageControlInfo struct {
	SNssai Snssai `json:"sNssai"`
	// indicating a time in seconds.
	DeregInactTimer *int32 `json:"deregInactTimer,omitempty"`
	// indicating a time in seconds.
	SessInactTimer *int32 `json:"sessInactTimer,omitempty"`
}

type _SliceUsageControlInfo SliceUsageControlInfo

// NewSliceUsageControlInfo instantiates a new SliceUsageControlInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliceUsageControlInfo(sNssai Snssai) *SliceUsageControlInfo {
	this := SliceUsageControlInfo{}
	return &this
}

// NewSliceUsageControlInfoWithDefaults instantiates a new SliceUsageControlInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliceUsageControlInfoWithDefaults() *SliceUsageControlInfo {
	this := SliceUsageControlInfo{}
	return &this
}

// GetSNssai returns the SNssai field value
func (o *SliceUsageControlInfo) GetSNssai() Snssai {
	if o == nil {
		var ret Snssai
		return ret
	}

	return o.SNssai
}

// GetSNssaiOk returns a tuple with the SNssai field value
// and a boolean to check if the value has been set.
func (o *SliceUsageControlInfo) GetSNssaiOk() (*Snssai, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SNssai, true
}

// SetSNssai sets field value
func (o *SliceUsageControlInfo) SetSNssai(v Snssai) {
	o.SNssai = v
}

// GetDeregInactTimer returns the DeregInactTimer field value if set, zero value otherwise.
func (o *SliceUsageControlInfo) GetDeregInactTimer() int32 {
	if o == nil || IsNil(o.DeregInactTimer) {
		var ret int32
		return ret
	}
	return *o.DeregInactTimer
}

// GetDeregInactTimerOk returns a tuple with the DeregInactTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceUsageControlInfo) GetDeregInactTimerOk() (*int32, bool) {
	if o == nil || IsNil(o.DeregInactTimer) {
		return nil, false
	}
	return o.DeregInactTimer, true
}

// HasDeregInactTimer returns a boolean if a field has been set.
func (o *SliceUsageControlInfo) HasDeregInactTimer() bool {
	if o != nil && !IsNil(o.DeregInactTimer) {
		return true
	}

	return false
}

// SetDeregInactTimer gets a reference to the given int32 and assigns it to the DeregInactTimer field.
func (o *SliceUsageControlInfo) SetDeregInactTimer(v int32) {
	o.DeregInactTimer = &v
}

// GetSessInactTimer returns the SessInactTimer field value if set, zero value otherwise.
func (o *SliceUsageControlInfo) GetSessInactTimer() int32 {
	if o == nil || IsNil(o.SessInactTimer) {
		var ret int32
		return ret
	}
	return *o.SessInactTimer
}

// GetSessInactTimerOk returns a tuple with the SessInactTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliceUsageControlInfo) GetSessInactTimerOk() (*int32, bool) {
	if o == nil || IsNil(o.SessInactTimer) {
		return nil, false
	}
	return o.SessInactTimer, true
}

// HasSessInactTimer returns a boolean if a field has been set.
func (o *SliceUsageControlInfo) HasSessInactTimer() bool {
	if o != nil && !IsNil(o.SessInactTimer) {
		return true
	}

	return false
}

// SetSessInactTimer gets a reference to the given int32 and assigns it to the SessInactTimer field.
func (o *SliceUsageControlInfo) SetSessInactTimer(v int32) {
	o.SessInactTimer = &v
}

func (o SliceUsageControlInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliceUsageControlInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sNssai"] = o.SNssai
	if !IsNil(o.DeregInactTimer) {
		toSerialize["deregInactTimer"] = o.DeregInactTimer
	}
	if !IsNil(o.SessInactTimer) {
		toSerialize["sessInactTimer"] = o.SessInactTimer
	}
	return toSerialize, nil
}

func (o *SliceUsageControlInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sNssai",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSliceUsageControlInfo := _SliceUsageControlInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSliceUsageControlInfo)

	if err != nil {
		return err
	}

	*o = SliceUsageControlInfo(varSliceUsageControlInfo)

	return err
}

type NullableSliceUsageControlInfo struct {
	value *SliceUsageControlInfo
	isSet bool
}

func (v NullableSliceUsageControlInfo) Get() *SliceUsageControlInfo {
	return v.value
}

func (v *NullableSliceUsageControlInfo) Set(val *SliceUsageControlInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSliceUsageControlInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSliceUsageControlInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliceUsageControlInfo(val *SliceUsageControlInfo) *NullableSliceUsageControlInfo {
	return &NullableSliceUsageControlInfo{value: val, isSet: true}
}

func (v NullableSliceUsageControlInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliceUsageControlInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


