/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NidInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NidInfo{}

// NidInfo contains NIDs.
type NidInfo struct {
	NidList []string `json:"nidList"`
}

type _NidInfo NidInfo

// NewNidInfo instantiates a new NidInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNidInfo(nidList []string) *NidInfo {
	this := NidInfo{}
	this.NidList = nidList
	return &this
}

// NewNidInfoWithDefaults instantiates a new NidInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNidInfoWithDefaults() *NidInfo {
	this := NidInfo{}
	return &this
}

// GetNidList returns the NidList field value
func (o *NidInfo) GetNidList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NidList
}

// GetNidListOk returns a tuple with the NidList field value
// and a boolean to check if the value has been set.
func (o *NidInfo) GetNidListOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NidList, true
}

// SetNidList sets field value
func (o *NidInfo) SetNidList(v []string) {
	o.NidList = v
}

func (o NidInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NidInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nidList"] = o.NidList
	return toSerialize, nil
}

func (o *NidInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nidList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNidInfo := _NidInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNidInfo)

	if err != nil {
		return err
	}

	*o = NidInfo(varNidInfo)

	return err
}

type NullableNidInfo struct {
	value *NidInfo
	isSet bool
}

func (v NullableNidInfo) Get() *NidInfo {
	return v.value
}

func (v *NullableNidInfo) Set(val *NidInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNidInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNidInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNidInfo(val *NidInfo) *NullableNidInfo {
	return &NullableNidInfo{value: val, isSet: true}
}

func (v NullableNidInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNidInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


