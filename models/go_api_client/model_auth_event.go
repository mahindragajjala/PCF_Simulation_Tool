/*
NudmUEAU

UDM UE Authentication Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AuthEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthEvent{}

// AuthEvent struct for AuthEvent
type AuthEvent struct {
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NfInstanceId string `json:"nfInstanceId"`
	Success bool `json:"success"`
	// string with format 'date-time' as defined in OpenAPI.
	TimeStamp time.Time `json:"timeStamp"`
	AuthType AuthType `json:"authType"`
	ServingNetworkName string `json:"servingNetworkName" validate:"regexp=^5G:mnc[0-9]{3}[.]mcc[0-9]{3}[.]3gppnetwork[.]org(:[A-F0-9]{11})?$"`
	AuthRemovalInd *bool `json:"authRemovalInd,omitempty"`
}

type _AuthEvent AuthEvent

// NewAuthEvent instantiates a new AuthEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthEvent(nfInstanceId string, success bool, timeStamp time.Time, authType AuthType, servingNetworkName string) *AuthEvent {
	this := AuthEvent{}
	this.NfInstanceId = nfInstanceId
	this.Success = success
	this.TimeStamp = timeStamp
	this.AuthType = authType
	this.ServingNetworkName = servingNetworkName
	var authRemovalInd bool = false
	this.AuthRemovalInd = &authRemovalInd
	return &this
}

// NewAuthEventWithDefaults instantiates a new AuthEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthEventWithDefaults() *AuthEvent {
	this := AuthEvent{}
	var authRemovalInd bool = false
	this.AuthRemovalInd = &authRemovalInd
	return &this
}

// GetNfInstanceId returns the NfInstanceId field value
func (o *AuthEvent) GetNfInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NfInstanceId
}

// GetNfInstanceIdOk returns a tuple with the NfInstanceId field value
// and a boolean to check if the value has been set.
func (o *AuthEvent) GetNfInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NfInstanceId, true
}

// SetNfInstanceId sets field value
func (o *AuthEvent) SetNfInstanceId(v string) {
	o.NfInstanceId = v
}

// GetSuccess returns the Success field value
func (o *AuthEvent) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *AuthEvent) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *AuthEvent) SetSuccess(v bool) {
	o.Success = v
}

// GetTimeStamp returns the TimeStamp field value
func (o *AuthEvent) GetTimeStamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TimeStamp
}

// GetTimeStampOk returns a tuple with the TimeStamp field value
// and a boolean to check if the value has been set.
func (o *AuthEvent) GetTimeStampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStamp, true
}

// SetTimeStamp sets field value
func (o *AuthEvent) SetTimeStamp(v time.Time) {
	o.TimeStamp = v
}

// GetAuthType returns the AuthType field value
func (o *AuthEvent) GetAuthType() AuthType {
	if o == nil {
		var ret AuthType
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *AuthEvent) GetAuthTypeOk() (*AuthType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *AuthEvent) SetAuthType(v AuthType) {
	o.AuthType = v
}

// GetServingNetworkName returns the ServingNetworkName field value
func (o *AuthEvent) GetServingNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServingNetworkName
}

// GetServingNetworkNameOk returns a tuple with the ServingNetworkName field value
// and a boolean to check if the value has been set.
func (o *AuthEvent) GetServingNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServingNetworkName, true
}

// SetServingNetworkName sets field value
func (o *AuthEvent) SetServingNetworkName(v string) {
	o.ServingNetworkName = v
}

// GetAuthRemovalInd returns the AuthRemovalInd field value if set, zero value otherwise.
func (o *AuthEvent) GetAuthRemovalInd() bool {
	if o == nil || IsNil(o.AuthRemovalInd) {
		var ret bool
		return ret
	}
	return *o.AuthRemovalInd
}

// GetAuthRemovalIndOk returns a tuple with the AuthRemovalInd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthEvent) GetAuthRemovalIndOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthRemovalInd) {
		return nil, false
	}
	return o.AuthRemovalInd, true
}

// HasAuthRemovalInd returns a boolean if a field has been set.
func (o *AuthEvent) HasAuthRemovalInd() bool {
	if o != nil && !IsNil(o.AuthRemovalInd) {
		return true
	}

	return false
}

// SetAuthRemovalInd gets a reference to the given bool and assigns it to the AuthRemovalInd field.
func (o *AuthEvent) SetAuthRemovalInd(v bool) {
	o.AuthRemovalInd = &v
}

func (o AuthEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nfInstanceId"] = o.NfInstanceId
	toSerialize["success"] = o.Success
	toSerialize["timeStamp"] = o.TimeStamp
	toSerialize["authType"] = o.AuthType
	toSerialize["servingNetworkName"] = o.ServingNetworkName
	if !IsNil(o.AuthRemovalInd) {
		toSerialize["authRemovalInd"] = o.AuthRemovalInd
	}
	return toSerialize, nil
}

func (o *AuthEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nfInstanceId",
		"success",
		"timeStamp",
		"authType",
		"servingNetworkName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthEvent := _AuthEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthEvent)

	if err != nil {
		return err
	}

	*o = AuthEvent(varAuthEvent)

	return err
}

type NullableAuthEvent struct {
	value *AuthEvent
	isSet bool
}

func (v NullableAuthEvent) Get() *AuthEvent {
	return v.value
}

func (v *NullableAuthEvent) Set(val *AuthEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthEvent(val *AuthEvent) *NullableAuthEvent {
	return &NullableAuthEvent{value: val, isSet: true}
}

func (v NullableAuthEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


