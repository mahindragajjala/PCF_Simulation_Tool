/*
Nudm_EE

Nudm Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UtraLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtraLocation{}

// UtraLocation Exactly one of cgi, sai or lai shall be present.
type UtraLocation struct {
	Cgi *CellGlobalId `json:"cgi,omitempty"`
	Sai *ServiceAreaId `json:"sai,omitempty"`
	Lai *LocationAreaId `json:"lai,omitempty"`
	Rai *RoutingAreaId `json:"rai,omitempty"`
	// The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value \"0\" indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode  or after a successful location reporting procedure  the UE is in connected mode. Any other value than \"0\" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8. 
	AgeOfLocationInformation *int32 `json:"ageOfLocationInformation,omitempty"`
	// string with format 'date-time' as defined in OpenAPI.
	UeLocationTimestamp *time.Time `json:"ueLocationTimestamp,omitempty"`
	// Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
	GeographicalInformation *string `json:"geographicalInformation,omitempty"`
	// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
	GeodeticInformation *string `json:"geodeticInformation,omitempty"`
}

// NewUtraLocation instantiates a new UtraLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtraLocation() *UtraLocation {
	this := UtraLocation{}
	return &this
}

// NewUtraLocationWithDefaults instantiates a new UtraLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtraLocationWithDefaults() *UtraLocation {
	this := UtraLocation{}
	return &this
}

// GetCgi returns the Cgi field value if set, zero value otherwise.
func (o *UtraLocation) GetCgi() CellGlobalId {
	if o == nil || IsNil(o.Cgi) {
		var ret CellGlobalId
		return ret
	}
	return *o.Cgi
}

// GetCgiOk returns a tuple with the Cgi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetCgiOk() (*CellGlobalId, bool) {
	if o == nil || IsNil(o.Cgi) {
		return nil, false
	}
	return o.Cgi, true
}

// HasCgi returns a boolean if a field has been set.
func (o *UtraLocation) HasCgi() bool {
	if o != nil && !IsNil(o.Cgi) {
		return true
	}

	return false
}

// SetCgi gets a reference to the given CellGlobalId and assigns it to the Cgi field.
func (o *UtraLocation) SetCgi(v CellGlobalId) {
	o.Cgi = &v
}

// GetSai returns the Sai field value if set, zero value otherwise.
func (o *UtraLocation) GetSai() ServiceAreaId {
	if o == nil || IsNil(o.Sai) {
		var ret ServiceAreaId
		return ret
	}
	return *o.Sai
}

// GetSaiOk returns a tuple with the Sai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetSaiOk() (*ServiceAreaId, bool) {
	if o == nil || IsNil(o.Sai) {
		return nil, false
	}
	return o.Sai, true
}

// HasSai returns a boolean if a field has been set.
func (o *UtraLocation) HasSai() bool {
	if o != nil && !IsNil(o.Sai) {
		return true
	}

	return false
}

// SetSai gets a reference to the given ServiceAreaId and assigns it to the Sai field.
func (o *UtraLocation) SetSai(v ServiceAreaId) {
	o.Sai = &v
}

// GetLai returns the Lai field value if set, zero value otherwise.
func (o *UtraLocation) GetLai() LocationAreaId {
	if o == nil || IsNil(o.Lai) {
		var ret LocationAreaId
		return ret
	}
	return *o.Lai
}

// GetLaiOk returns a tuple with the Lai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetLaiOk() (*LocationAreaId, bool) {
	if o == nil || IsNil(o.Lai) {
		return nil, false
	}
	return o.Lai, true
}

// HasLai returns a boolean if a field has been set.
func (o *UtraLocation) HasLai() bool {
	if o != nil && !IsNil(o.Lai) {
		return true
	}

	return false
}

// SetLai gets a reference to the given LocationAreaId and assigns it to the Lai field.
func (o *UtraLocation) SetLai(v LocationAreaId) {
	o.Lai = &v
}

// GetRai returns the Rai field value if set, zero value otherwise.
func (o *UtraLocation) GetRai() RoutingAreaId {
	if o == nil || IsNil(o.Rai) {
		var ret RoutingAreaId
		return ret
	}
	return *o.Rai
}

// GetRaiOk returns a tuple with the Rai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetRaiOk() (*RoutingAreaId, bool) {
	if o == nil || IsNil(o.Rai) {
		return nil, false
	}
	return o.Rai, true
}

// HasRai returns a boolean if a field has been set.
func (o *UtraLocation) HasRai() bool {
	if o != nil && !IsNil(o.Rai) {
		return true
	}

	return false
}

// SetRai gets a reference to the given RoutingAreaId and assigns it to the Rai field.
func (o *UtraLocation) SetRai(v RoutingAreaId) {
	o.Rai = &v
}

// GetAgeOfLocationInformation returns the AgeOfLocationInformation field value if set, zero value otherwise.
func (o *UtraLocation) GetAgeOfLocationInformation() int32 {
	if o == nil || IsNil(o.AgeOfLocationInformation) {
		var ret int32
		return ret
	}
	return *o.AgeOfLocationInformation
}

// GetAgeOfLocationInformationOk returns a tuple with the AgeOfLocationInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetAgeOfLocationInformationOk() (*int32, bool) {
	if o == nil || IsNil(o.AgeOfLocationInformation) {
		return nil, false
	}
	return o.AgeOfLocationInformation, true
}

// HasAgeOfLocationInformation returns a boolean if a field has been set.
func (o *UtraLocation) HasAgeOfLocationInformation() bool {
	if o != nil && !IsNil(o.AgeOfLocationInformation) {
		return true
	}

	return false
}

// SetAgeOfLocationInformation gets a reference to the given int32 and assigns it to the AgeOfLocationInformation field.
func (o *UtraLocation) SetAgeOfLocationInformation(v int32) {
	o.AgeOfLocationInformation = &v
}

// GetUeLocationTimestamp returns the UeLocationTimestamp field value if set, zero value otherwise.
func (o *UtraLocation) GetUeLocationTimestamp() time.Time {
	if o == nil || IsNil(o.UeLocationTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.UeLocationTimestamp
}

// GetUeLocationTimestampOk returns a tuple with the UeLocationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetUeLocationTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UeLocationTimestamp) {
		return nil, false
	}
	return o.UeLocationTimestamp, true
}

// HasUeLocationTimestamp returns a boolean if a field has been set.
func (o *UtraLocation) HasUeLocationTimestamp() bool {
	if o != nil && !IsNil(o.UeLocationTimestamp) {
		return true
	}

	return false
}

// SetUeLocationTimestamp gets a reference to the given time.Time and assigns it to the UeLocationTimestamp field.
func (o *UtraLocation) SetUeLocationTimestamp(v time.Time) {
	o.UeLocationTimestamp = &v
}

// GetGeographicalInformation returns the GeographicalInformation field value if set, zero value otherwise.
func (o *UtraLocation) GetGeographicalInformation() string {
	if o == nil || IsNil(o.GeographicalInformation) {
		var ret string
		return ret
	}
	return *o.GeographicalInformation
}

// GetGeographicalInformationOk returns a tuple with the GeographicalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetGeographicalInformationOk() (*string, bool) {
	if o == nil || IsNil(o.GeographicalInformation) {
		return nil, false
	}
	return o.GeographicalInformation, true
}

// HasGeographicalInformation returns a boolean if a field has been set.
func (o *UtraLocation) HasGeographicalInformation() bool {
	if o != nil && !IsNil(o.GeographicalInformation) {
		return true
	}

	return false
}

// SetGeographicalInformation gets a reference to the given string and assigns it to the GeographicalInformation field.
func (o *UtraLocation) SetGeographicalInformation(v string) {
	o.GeographicalInformation = &v
}

// GetGeodeticInformation returns the GeodeticInformation field value if set, zero value otherwise.
func (o *UtraLocation) GetGeodeticInformation() string {
	if o == nil || IsNil(o.GeodeticInformation) {
		var ret string
		return ret
	}
	return *o.GeodeticInformation
}

// GetGeodeticInformationOk returns a tuple with the GeodeticInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtraLocation) GetGeodeticInformationOk() (*string, bool) {
	if o == nil || IsNil(o.GeodeticInformation) {
		return nil, false
	}
	return o.GeodeticInformation, true
}

// HasGeodeticInformation returns a boolean if a field has been set.
func (o *UtraLocation) HasGeodeticInformation() bool {
	if o != nil && !IsNil(o.GeodeticInformation) {
		return true
	}

	return false
}

// SetGeodeticInformation gets a reference to the given string and assigns it to the GeodeticInformation field.
func (o *UtraLocation) SetGeodeticInformation(v string) {
	o.GeodeticInformation = &v
}

func (o UtraLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtraLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cgi) {
		toSerialize["cgi"] = o.Cgi
	}
	if !IsNil(o.Sai) {
		toSerialize["sai"] = o.Sai
	}
	if !IsNil(o.Lai) {
		toSerialize["lai"] = o.Lai
	}
	if !IsNil(o.Rai) {
		toSerialize["rai"] = o.Rai
	}
	if !IsNil(o.AgeOfLocationInformation) {
		toSerialize["ageOfLocationInformation"] = o.AgeOfLocationInformation
	}
	if !IsNil(o.UeLocationTimestamp) {
		toSerialize["ueLocationTimestamp"] = o.UeLocationTimestamp
	}
	if !IsNil(o.GeographicalInformation) {
		toSerialize["geographicalInformation"] = o.GeographicalInformation
	}
	if !IsNil(o.GeodeticInformation) {
		toSerialize["geodeticInformation"] = o.GeodeticInformation
	}
	return toSerialize, nil
}

type NullableUtraLocation struct {
	value *UtraLocation
	isSet bool
}

func (v NullableUtraLocation) Get() *UtraLocation {
	return v.value
}

func (v *NullableUtraLocation) Set(val *UtraLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableUtraLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableUtraLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtraLocation(val *UtraLocation) *NullableUtraLocation {
	return &NullableUtraLocation{value: val, isSet: true}
}

func (v NullableUtraLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtraLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


