/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeSyncData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSyncData{}

// TimeSyncData struct for TimeSyncData
type TimeSyncData struct {
	Authorized bool `json:"authorized"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	UuTimeSyncErrBdgt *int32 `json:"uuTimeSyncErrBdgt,omitempty"`
	TempVals []TemporalValidity `json:"tempVals,omitempty"`
	CoverageArea []Tai `json:"coverageArea,omitempty"`
	ClockQualityDetailLevel *ClockQualityDetailLevel `json:"clockQualityDetailLevel,omitempty"`
	ClockQualityAcceptanceCriterion *ClockQualityAcceptanceCriterion `json:"clockQualityAcceptanceCriterion,omitempty"`
}

type _TimeSyncData TimeSyncData

// NewTimeSyncData instantiates a new TimeSyncData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSyncData(authorized bool) *TimeSyncData {
	this := TimeSyncData{}
	this.Authorized = authorized
	return &this
}

// NewTimeSyncDataWithDefaults instantiates a new TimeSyncData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSyncDataWithDefaults() *TimeSyncData {
	this := TimeSyncData{}
	return &this
}

// GetAuthorized returns the Authorized field value
func (o *TimeSyncData) GetAuthorized() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Authorized
}

// GetAuthorizedOk returns a tuple with the Authorized field value
// and a boolean to check if the value has been set.
func (o *TimeSyncData) GetAuthorizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authorized, true
}

// SetAuthorized sets field value
func (o *TimeSyncData) SetAuthorized(v bool) {
	o.Authorized = v
}

// GetUuTimeSyncErrBdgt returns the UuTimeSyncErrBdgt field value if set, zero value otherwise.
func (o *TimeSyncData) GetUuTimeSyncErrBdgt() int32 {
	if o == nil || IsNil(o.UuTimeSyncErrBdgt) {
		var ret int32
		return ret
	}
	return *o.UuTimeSyncErrBdgt
}

// GetUuTimeSyncErrBdgtOk returns a tuple with the UuTimeSyncErrBdgt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSyncData) GetUuTimeSyncErrBdgtOk() (*int32, bool) {
	if o == nil || IsNil(o.UuTimeSyncErrBdgt) {
		return nil, false
	}
	return o.UuTimeSyncErrBdgt, true
}

// HasUuTimeSyncErrBdgt returns a boolean if a field has been set.
func (o *TimeSyncData) HasUuTimeSyncErrBdgt() bool {
	if o != nil && !IsNil(o.UuTimeSyncErrBdgt) {
		return true
	}

	return false
}

// SetUuTimeSyncErrBdgt gets a reference to the given int32 and assigns it to the UuTimeSyncErrBdgt field.
func (o *TimeSyncData) SetUuTimeSyncErrBdgt(v int32) {
	o.UuTimeSyncErrBdgt = &v
}

// GetTempVals returns the TempVals field value if set, zero value otherwise.
func (o *TimeSyncData) GetTempVals() []TemporalValidity {
	if o == nil || IsNil(o.TempVals) {
		var ret []TemporalValidity
		return ret
	}
	return o.TempVals
}

// GetTempValsOk returns a tuple with the TempVals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSyncData) GetTempValsOk() ([]TemporalValidity, bool) {
	if o == nil || IsNil(o.TempVals) {
		return nil, false
	}
	return o.TempVals, true
}

// HasTempVals returns a boolean if a field has been set.
func (o *TimeSyncData) HasTempVals() bool {
	if o != nil && !IsNil(o.TempVals) {
		return true
	}

	return false
}

// SetTempVals gets a reference to the given []TemporalValidity and assigns it to the TempVals field.
func (o *TimeSyncData) SetTempVals(v []TemporalValidity) {
	o.TempVals = v
}

// GetCoverageArea returns the CoverageArea field value if set, zero value otherwise.
func (o *TimeSyncData) GetCoverageArea() []Tai {
	if o == nil || IsNil(o.CoverageArea) {
		var ret []Tai
		return ret
	}
	return o.CoverageArea
}

// GetCoverageAreaOk returns a tuple with the CoverageArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSyncData) GetCoverageAreaOk() ([]Tai, bool) {
	if o == nil || IsNil(o.CoverageArea) {
		return nil, false
	}
	return o.CoverageArea, true
}

// HasCoverageArea returns a boolean if a field has been set.
func (o *TimeSyncData) HasCoverageArea() bool {
	if o != nil && !IsNil(o.CoverageArea) {
		return true
	}

	return false
}

// SetCoverageArea gets a reference to the given []Tai and assigns it to the CoverageArea field.
func (o *TimeSyncData) SetCoverageArea(v []Tai) {
	o.CoverageArea = v
}

// GetClockQualityDetailLevel returns the ClockQualityDetailLevel field value if set, zero value otherwise.
func (o *TimeSyncData) GetClockQualityDetailLevel() ClockQualityDetailLevel {
	if o == nil || IsNil(o.ClockQualityDetailLevel) {
		var ret ClockQualityDetailLevel
		return ret
	}
	return *o.ClockQualityDetailLevel
}

// GetClockQualityDetailLevelOk returns a tuple with the ClockQualityDetailLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSyncData) GetClockQualityDetailLevelOk() (*ClockQualityDetailLevel, bool) {
	if o == nil || IsNil(o.ClockQualityDetailLevel) {
		return nil, false
	}
	return o.ClockQualityDetailLevel, true
}

// HasClockQualityDetailLevel returns a boolean if a field has been set.
func (o *TimeSyncData) HasClockQualityDetailLevel() bool {
	if o != nil && !IsNil(o.ClockQualityDetailLevel) {
		return true
	}

	return false
}

// SetClockQualityDetailLevel gets a reference to the given ClockQualityDetailLevel and assigns it to the ClockQualityDetailLevel field.
func (o *TimeSyncData) SetClockQualityDetailLevel(v ClockQualityDetailLevel) {
	o.ClockQualityDetailLevel = &v
}

// GetClockQualityAcceptanceCriterion returns the ClockQualityAcceptanceCriterion field value if set, zero value otherwise.
func (o *TimeSyncData) GetClockQualityAcceptanceCriterion() ClockQualityAcceptanceCriterion {
	if o == nil || IsNil(o.ClockQualityAcceptanceCriterion) {
		var ret ClockQualityAcceptanceCriterion
		return ret
	}
	return *o.ClockQualityAcceptanceCriterion
}

// GetClockQualityAcceptanceCriterionOk returns a tuple with the ClockQualityAcceptanceCriterion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeSyncData) GetClockQualityAcceptanceCriterionOk() (*ClockQualityAcceptanceCriterion, bool) {
	if o == nil || IsNil(o.ClockQualityAcceptanceCriterion) {
		return nil, false
	}
	return o.ClockQualityAcceptanceCriterion, true
}

// HasClockQualityAcceptanceCriterion returns a boolean if a field has been set.
func (o *TimeSyncData) HasClockQualityAcceptanceCriterion() bool {
	if o != nil && !IsNil(o.ClockQualityAcceptanceCriterion) {
		return true
	}

	return false
}

// SetClockQualityAcceptanceCriterion gets a reference to the given ClockQualityAcceptanceCriterion and assigns it to the ClockQualityAcceptanceCriterion field.
func (o *TimeSyncData) SetClockQualityAcceptanceCriterion(v ClockQualityAcceptanceCriterion) {
	o.ClockQualityAcceptanceCriterion = &v
}

func (o TimeSyncData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSyncData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authorized"] = o.Authorized
	if !IsNil(o.UuTimeSyncErrBdgt) {
		toSerialize["uuTimeSyncErrBdgt"] = o.UuTimeSyncErrBdgt
	}
	if !IsNil(o.TempVals) {
		toSerialize["tempVals"] = o.TempVals
	}
	if !IsNil(o.CoverageArea) {
		toSerialize["coverageArea"] = o.CoverageArea
	}
	if !IsNil(o.ClockQualityDetailLevel) {
		toSerialize["clockQualityDetailLevel"] = o.ClockQualityDetailLevel
	}
	if !IsNil(o.ClockQualityAcceptanceCriterion) {
		toSerialize["clockQualityAcceptanceCriterion"] = o.ClockQualityAcceptanceCriterion
	}
	return toSerialize, nil
}

func (o *TimeSyncData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authorized",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeSyncData := _TimeSyncData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeSyncData)

	if err != nil {
		return err
	}

	*o = TimeSyncData(varTimeSyncData)

	return err
}

type NullableTimeSyncData struct {
	value *TimeSyncData
	isSet bool
}

func (v NullableTimeSyncData) Get() *TimeSyncData {
	return v.value
}

func (v *NullableTimeSyncData) Set(val *TimeSyncData) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSyncData) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSyncData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSyncData(val *TimeSyncData) *NullableTimeSyncData {
	return &NullableTimeSyncData{value: val, isSet: true}
}

func (v NullableTimeSyncData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSyncData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


