/*
NudmUEAU

UDM UE Authentication Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResynchronizationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResynchronizationInfo{}

// ResynchronizationInfo struct for ResynchronizationInfo
type ResynchronizationInfo struct {
	Rand string `json:"rand" validate:"regexp=^[A-Fa-f0-9]{32}$"`
	Auts string `json:"auts" validate:"regexp=^[A-Fa-f0-9]{28}$"`
}

type _ResynchronizationInfo ResynchronizationInfo

// NewResynchronizationInfo instantiates a new ResynchronizationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResynchronizationInfo(rand string, auts string) *ResynchronizationInfo {
	this := ResynchronizationInfo{}
	this.Rand = rand
	this.Auts = auts
	return &this
}

// NewResynchronizationInfoWithDefaults instantiates a new ResynchronizationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResynchronizationInfoWithDefaults() *ResynchronizationInfo {
	this := ResynchronizationInfo{}
	return &this
}

// GetRand returns the Rand field value
func (o *ResynchronizationInfo) GetRand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rand
}

// GetRandOk returns a tuple with the Rand field value
// and a boolean to check if the value has been set.
func (o *ResynchronizationInfo) GetRandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rand, true
}

// SetRand sets field value
func (o *ResynchronizationInfo) SetRand(v string) {
	o.Rand = v
}

// GetAuts returns the Auts field value
func (o *ResynchronizationInfo) GetAuts() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Auts
}

// GetAutsOk returns a tuple with the Auts field value
// and a boolean to check if the value has been set.
func (o *ResynchronizationInfo) GetAutsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Auts, true
}

// SetAuts sets field value
func (o *ResynchronizationInfo) SetAuts(v string) {
	o.Auts = v
}

func (o ResynchronizationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResynchronizationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rand"] = o.Rand
	toSerialize["auts"] = o.Auts
	return toSerialize, nil
}

func (o *ResynchronizationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rand",
		"auts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResynchronizationInfo := _ResynchronizationInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResynchronizationInfo)

	if err != nil {
		return err
	}

	*o = ResynchronizationInfo(varResynchronizationInfo)

	return err
}

type NullableResynchronizationInfo struct {
	value *ResynchronizationInfo
	isSet bool
}

func (v NullableResynchronizationInfo) Get() *ResynchronizationInfo {
	return v.value
}

func (v *NullableResynchronizationInfo) Set(val *ResynchronizationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResynchronizationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResynchronizationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResynchronizationInfo(val *ResynchronizationInfo) *NullableResynchronizationInfo {
	return &NullableResynchronizationInfo{value: val, isSet: true}
}

func (v NullableResynchronizationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResynchronizationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


