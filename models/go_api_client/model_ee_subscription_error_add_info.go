/*
Nudm_EE

Nudm Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EeSubscriptionErrorAddInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EeSubscriptionErrorAddInfo{}

// EeSubscriptionErrorAddInfo Additional Information for EE Subscription Error.
type EeSubscriptionErrorAddInfo struct {
	SubType *SubscriptionType `json:"subType,omitempty"`
	// A map (list of key-value pairs where referenceId converted from integer to string serves as key; see clause 6.4.6.3.2) of FailedMonitoringConfiguration 
	FailedMonitoringConfigs *map[string]FailedMonitoringConfiguration `json:"failedMonitoringConfigs,omitempty"`
	// A map (list of key-value pairs where referenceId converted from integer to string serves as key; see clause 6.4.6.3.2) of FailedMonitoringConfiguration, the key value \"ALL\" may  be used to identify a map entry which contains the failed cause of the EE subscription  was not successful in EPC domain. 
	FailedMoniConfigsEPC *map[string]FailedMonitoringConfiguration `json:"failedMoniConfigsEPC,omitempty"`
}

// NewEeSubscriptionErrorAddInfo instantiates a new EeSubscriptionErrorAddInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEeSubscriptionErrorAddInfo() *EeSubscriptionErrorAddInfo {
	this := EeSubscriptionErrorAddInfo{}
	return &this
}

// NewEeSubscriptionErrorAddInfoWithDefaults instantiates a new EeSubscriptionErrorAddInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEeSubscriptionErrorAddInfoWithDefaults() *EeSubscriptionErrorAddInfo {
	this := EeSubscriptionErrorAddInfo{}
	return &this
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *EeSubscriptionErrorAddInfo) GetSubType() SubscriptionType {
	if o == nil || IsNil(o.SubType) {
		var ret SubscriptionType
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscriptionErrorAddInfo) GetSubTypeOk() (*SubscriptionType, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *EeSubscriptionErrorAddInfo) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given SubscriptionType and assigns it to the SubType field.
func (o *EeSubscriptionErrorAddInfo) SetSubType(v SubscriptionType) {
	o.SubType = &v
}

// GetFailedMonitoringConfigs returns the FailedMonitoringConfigs field value if set, zero value otherwise.
func (o *EeSubscriptionErrorAddInfo) GetFailedMonitoringConfigs() map[string]FailedMonitoringConfiguration {
	if o == nil || IsNil(o.FailedMonitoringConfigs) {
		var ret map[string]FailedMonitoringConfiguration
		return ret
	}
	return *o.FailedMonitoringConfigs
}

// GetFailedMonitoringConfigsOk returns a tuple with the FailedMonitoringConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscriptionErrorAddInfo) GetFailedMonitoringConfigsOk() (*map[string]FailedMonitoringConfiguration, bool) {
	if o == nil || IsNil(o.FailedMonitoringConfigs) {
		return nil, false
	}
	return o.FailedMonitoringConfigs, true
}

// HasFailedMonitoringConfigs returns a boolean if a field has been set.
func (o *EeSubscriptionErrorAddInfo) HasFailedMonitoringConfigs() bool {
	if o != nil && !IsNil(o.FailedMonitoringConfigs) {
		return true
	}

	return false
}

// SetFailedMonitoringConfigs gets a reference to the given map[string]FailedMonitoringConfiguration and assigns it to the FailedMonitoringConfigs field.
func (o *EeSubscriptionErrorAddInfo) SetFailedMonitoringConfigs(v map[string]FailedMonitoringConfiguration) {
	o.FailedMonitoringConfigs = &v
}

// GetFailedMoniConfigsEPC returns the FailedMoniConfigsEPC field value if set, zero value otherwise.
func (o *EeSubscriptionErrorAddInfo) GetFailedMoniConfigsEPC() map[string]FailedMonitoringConfiguration {
	if o == nil || IsNil(o.FailedMoniConfigsEPC) {
		var ret map[string]FailedMonitoringConfiguration
		return ret
	}
	return *o.FailedMoniConfigsEPC
}

// GetFailedMoniConfigsEPCOk returns a tuple with the FailedMoniConfigsEPC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EeSubscriptionErrorAddInfo) GetFailedMoniConfigsEPCOk() (*map[string]FailedMonitoringConfiguration, bool) {
	if o == nil || IsNil(o.FailedMoniConfigsEPC) {
		return nil, false
	}
	return o.FailedMoniConfigsEPC, true
}

// HasFailedMoniConfigsEPC returns a boolean if a field has been set.
func (o *EeSubscriptionErrorAddInfo) HasFailedMoniConfigsEPC() bool {
	if o != nil && !IsNil(o.FailedMoniConfigsEPC) {
		return true
	}

	return false
}

// SetFailedMoniConfigsEPC gets a reference to the given map[string]FailedMonitoringConfiguration and assigns it to the FailedMoniConfigsEPC field.
func (o *EeSubscriptionErrorAddInfo) SetFailedMoniConfigsEPC(v map[string]FailedMonitoringConfiguration) {
	o.FailedMoniConfigsEPC = &v
}

func (o EeSubscriptionErrorAddInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EeSubscriptionErrorAddInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !IsNil(o.FailedMonitoringConfigs) {
		toSerialize["failedMonitoringConfigs"] = o.FailedMonitoringConfigs
	}
	if !IsNil(o.FailedMoniConfigsEPC) {
		toSerialize["failedMoniConfigsEPC"] = o.FailedMoniConfigsEPC
	}
	return toSerialize, nil
}

type NullableEeSubscriptionErrorAddInfo struct {
	value *EeSubscriptionErrorAddInfo
	isSet bool
}

func (v NullableEeSubscriptionErrorAddInfo) Get() *EeSubscriptionErrorAddInfo {
	return v.value
}

func (v *NullableEeSubscriptionErrorAddInfo) Set(val *EeSubscriptionErrorAddInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEeSubscriptionErrorAddInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEeSubscriptionErrorAddInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEeSubscriptionErrorAddInfo(val *EeSubscriptionErrorAddInfo) *NullableEeSubscriptionErrorAddInfo {
	return &NullableEeSubscriptionErrorAddInfo{value: val, isSet: true}
}

func (v NullableEeSubscriptionErrorAddInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEeSubscriptionErrorAddInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


