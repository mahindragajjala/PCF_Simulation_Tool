/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.3.0-alpha.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionalCagInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionalCagInfo{}

// ConditionalCagInfo struct for ConditionalCagInfo
type ConditionalCagInfo struct {
	AllowedCagList []string `json:"allowedCagList"`
	CagOnlyIndicator *bool `json:"cagOnlyIndicator,omitempty"`
	ValidTimePeriod *ValidTimePeriod `json:"validTimePeriod,omitempty"`
}

type _ConditionalCagInfo ConditionalCagInfo

// NewConditionalCagInfo instantiates a new ConditionalCagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalCagInfo(allowedCagList []string) *ConditionalCagInfo {
	this := ConditionalCagInfo{}
	this.AllowedCagList = allowedCagList
	return &this
}

// NewConditionalCagInfoWithDefaults instantiates a new ConditionalCagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalCagInfoWithDefaults() *ConditionalCagInfo {
	this := ConditionalCagInfo{}
	return &this
}

// GetAllowedCagList returns the AllowedCagList field value
func (o *ConditionalCagInfo) GetAllowedCagList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedCagList
}

// GetAllowedCagListOk returns a tuple with the AllowedCagList field value
// and a boolean to check if the value has been set.
func (o *ConditionalCagInfo) GetAllowedCagListOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedCagList, true
}

// SetAllowedCagList sets field value
func (o *ConditionalCagInfo) SetAllowedCagList(v []string) {
	o.AllowedCagList = v
}

// GetCagOnlyIndicator returns the CagOnlyIndicator field value if set, zero value otherwise.
func (o *ConditionalCagInfo) GetCagOnlyIndicator() bool {
	if o == nil || IsNil(o.CagOnlyIndicator) {
		var ret bool
		return ret
	}
	return *o.CagOnlyIndicator
}

// GetCagOnlyIndicatorOk returns a tuple with the CagOnlyIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalCagInfo) GetCagOnlyIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.CagOnlyIndicator) {
		return nil, false
	}
	return o.CagOnlyIndicator, true
}

// HasCagOnlyIndicator returns a boolean if a field has been set.
func (o *ConditionalCagInfo) HasCagOnlyIndicator() bool {
	if o != nil && !IsNil(o.CagOnlyIndicator) {
		return true
	}

	return false
}

// SetCagOnlyIndicator gets a reference to the given bool and assigns it to the CagOnlyIndicator field.
func (o *ConditionalCagInfo) SetCagOnlyIndicator(v bool) {
	o.CagOnlyIndicator = &v
}

// GetValidTimePeriod returns the ValidTimePeriod field value if set, zero value otherwise.
func (o *ConditionalCagInfo) GetValidTimePeriod() ValidTimePeriod {
	if o == nil || IsNil(o.ValidTimePeriod) {
		var ret ValidTimePeriod
		return ret
	}
	return *o.ValidTimePeriod
}

// GetValidTimePeriodOk returns a tuple with the ValidTimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalCagInfo) GetValidTimePeriodOk() (*ValidTimePeriod, bool) {
	if o == nil || IsNil(o.ValidTimePeriod) {
		return nil, false
	}
	return o.ValidTimePeriod, true
}

// HasValidTimePeriod returns a boolean if a field has been set.
func (o *ConditionalCagInfo) HasValidTimePeriod() bool {
	if o != nil && !IsNil(o.ValidTimePeriod) {
		return true
	}

	return false
}

// SetValidTimePeriod gets a reference to the given ValidTimePeriod and assigns it to the ValidTimePeriod field.
func (o *ConditionalCagInfo) SetValidTimePeriod(v ValidTimePeriod) {
	o.ValidTimePeriod = &v
}

func (o ConditionalCagInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionalCagInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowedCagList"] = o.AllowedCagList
	if !IsNil(o.CagOnlyIndicator) {
		toSerialize["cagOnlyIndicator"] = o.CagOnlyIndicator
	}
	if !IsNil(o.ValidTimePeriod) {
		toSerialize["validTimePeriod"] = o.ValidTimePeriod
	}
	return toSerialize, nil
}

func (o *ConditionalCagInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowedCagList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionalCagInfo := _ConditionalCagInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionalCagInfo)

	if err != nil {
		return err
	}

	*o = ConditionalCagInfo(varConditionalCagInfo)

	return err
}

type NullableConditionalCagInfo struct {
	value *ConditionalCagInfo
	isSet bool
}

func (v NullableConditionalCagInfo) Get() *ConditionalCagInfo {
	return v.value
}

func (v *NullableConditionalCagInfo) Set(val *ConditionalCagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalCagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalCagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalCagInfo(val *ConditionalCagInfo) *NullableConditionalCagInfo {
	return &NullableConditionalCagInfo{value: val, isSet: true}
}

func (v NullableConditionalCagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalCagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


