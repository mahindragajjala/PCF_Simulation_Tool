/*
Nudm_EE

Nudm Event Exposure Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.3.0-alpha.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LocationReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationReport{}

// LocationReport struct for LocationReport
type LocationReport struct {
	Location UserLocation `json:"location"`
}

type _LocationReport LocationReport

// NewLocationReport instantiates a new LocationReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationReport(location UserLocation) *LocationReport {
	this := LocationReport{}
	this.Location = location
	return &this
}

// NewLocationReportWithDefaults instantiates a new LocationReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationReportWithDefaults() *LocationReport {
	this := LocationReport{}
	return &this
}

// GetLocation returns the Location field value
func (o *LocationReport) GetLocation() UserLocation {
	if o == nil {
		var ret UserLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *LocationReport) GetLocationOk() (*UserLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *LocationReport) SetLocation(v UserLocation) {
	o.Location = v
}

func (o LocationReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["location"] = o.Location
	return toSerialize, nil
}

func (o *LocationReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocationReport := _LocationReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocationReport)

	if err != nil {
		return err
	}

	*o = LocationReport(varLocationReport)

	return err
}

type NullableLocationReport struct {
	value *LocationReport
	isSet bool
}

func (v NullableLocationReport) Get() *LocationReport {
	return v.value
}

func (v *NullableLocationReport) Set(val *LocationReport) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationReport) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationReport(val *LocationReport) *NullableLocationReport {
	return &NullableLocationReport{value: val, isSet: true}
}

func (v NullableLocationReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


