/*
NudmUEAU

UDM UE Authentication Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthenticationInfoResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationInfoResult{}

// AuthenticationInfoResult struct for AuthenticationInfoResult
type AuthenticationInfoResult struct {
	AuthType AuthType `json:"authType"`
	// A string used to indicate the features supported by an API that is used as defined in clause  6.6 in 3GPP TS 29.500. The string shall contain a bitmask indicating supported features in  hexadecimal representation Each character in the string shall take a value of \"0\" to \"9\",  \"a\" to \"f\" or \"A\" to \"F\" and shall represent the support of 4 features as described in  table 5.2.2-3. The most significant character representing the highest-numbered features shall  appear first in the string, and the character representing features 1 to 4 shall appear last  in the string. The list of features and their numbering (starting with 1) are defined  separately for each API. If the string contains a lower number of characters than there are  defined features for an API, all features that would be represented by characters that are not  present in the string are not supported. 
	SupportedFeatures *string `json:"supportedFeatures,omitempty" validate:"regexp=^[A-Fa-f0-9]*$"`
	AuthenticationVector *AuthenticationVector `json:"authenticationVector,omitempty"`
	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	Supi *string `json:"supi,omitempty" validate:"regexp=^(imsi-[0-9]{5,15}|nai-.+|gci-.+|gli-.+|.+)$"`
}

type _AuthenticationInfoResult AuthenticationInfoResult

// NewAuthenticationInfoResult instantiates a new AuthenticationInfoResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationInfoResult(authType AuthType) *AuthenticationInfoResult {
	this := AuthenticationInfoResult{}
	this.AuthType = authType
	return &this
}

// NewAuthenticationInfoResultWithDefaults instantiates a new AuthenticationInfoResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationInfoResultWithDefaults() *AuthenticationInfoResult {
	this := AuthenticationInfoResult{}
	return &this
}

// GetAuthType returns the AuthType field value
func (o *AuthenticationInfoResult) GetAuthType() AuthType {
	if o == nil {
		var ret AuthType
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *AuthenticationInfoResult) GetAuthTypeOk() (*AuthType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *AuthenticationInfoResult) SetAuthType(v AuthType) {
	o.AuthType = v
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *AuthenticationInfoResult) GetSupportedFeatures() string {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret string
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfoResult) GetSupportedFeaturesOk() (*string, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *AuthenticationInfoResult) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given string and assigns it to the SupportedFeatures field.
func (o *AuthenticationInfoResult) SetSupportedFeatures(v string) {
	o.SupportedFeatures = &v
}

// GetAuthenticationVector returns the AuthenticationVector field value if set, zero value otherwise.
func (o *AuthenticationInfoResult) GetAuthenticationVector() AuthenticationVector {
	if o == nil || IsNil(o.AuthenticationVector) {
		var ret AuthenticationVector
		return ret
	}
	return *o.AuthenticationVector
}

// GetAuthenticationVectorOk returns a tuple with the AuthenticationVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfoResult) GetAuthenticationVectorOk() (*AuthenticationVector, bool) {
	if o == nil || IsNil(o.AuthenticationVector) {
		return nil, false
	}
	return o.AuthenticationVector, true
}

// HasAuthenticationVector returns a boolean if a field has been set.
func (o *AuthenticationInfoResult) HasAuthenticationVector() bool {
	if o != nil && !IsNil(o.AuthenticationVector) {
		return true
	}

	return false
}

// SetAuthenticationVector gets a reference to the given AuthenticationVector and assigns it to the AuthenticationVector field.
func (o *AuthenticationInfoResult) SetAuthenticationVector(v AuthenticationVector) {
	o.AuthenticationVector = &v
}

// GetSupi returns the Supi field value if set, zero value otherwise.
func (o *AuthenticationInfoResult) GetSupi() string {
	if o == nil || IsNil(o.Supi) {
		var ret string
		return ret
	}
	return *o.Supi
}

// GetSupiOk returns a tuple with the Supi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationInfoResult) GetSupiOk() (*string, bool) {
	if o == nil || IsNil(o.Supi) {
		return nil, false
	}
	return o.Supi, true
}

// HasSupi returns a boolean if a field has been set.
func (o *AuthenticationInfoResult) HasSupi() bool {
	if o != nil && !IsNil(o.Supi) {
		return true
	}

	return false
}

// SetSupi gets a reference to the given string and assigns it to the Supi field.
func (o *AuthenticationInfoResult) SetSupi(v string) {
	o.Supi = &v
}

func (o AuthenticationInfoResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationInfoResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authType"] = o.AuthType
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supportedFeatures"] = o.SupportedFeatures
	}
	if !IsNil(o.AuthenticationVector) {
		toSerialize["authenticationVector"] = o.AuthenticationVector
	}
	if !IsNil(o.Supi) {
		toSerialize["supi"] = o.Supi
	}
	return toSerialize, nil
}

func (o *AuthenticationInfoResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationInfoResult := _AuthenticationInfoResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthenticationInfoResult)

	if err != nil {
		return err
	}

	*o = AuthenticationInfoResult(varAuthenticationInfoResult)

	return err
}

type NullableAuthenticationInfoResult struct {
	value *AuthenticationInfoResult
	isSet bool
}

func (v NullableAuthenticationInfoResult) Get() *AuthenticationInfoResult {
	return v.value
}

func (v *NullableAuthenticationInfoResult) Set(val *AuthenticationInfoResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationInfoResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationInfoResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationInfoResult(val *AuthenticationInfoResult) *NullableAuthenticationInfoResult {
	return &NullableAuthenticationInfoResult{value: val, isSet: true}
}

func (v NullableAuthenticationInfoResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationInfoResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


